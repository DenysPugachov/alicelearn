{"version":3,"sources":["componets/header/header.js","componets/inputAnswer/inputAnswer.js","componets/randomIntGen/randomIntGen.js","componets/expressions/sub.js","componets/expressions/add.js","componets/expressions/mul.js","componets/expressions/dev.js","componets/expressions/Expression.js","componets/app/app.js","index.js"],"names":["Header","props","expressionBtns","buttons","map","btn","className","cls","selectedBtn","id","onClick","btnClicked","label","InputAnswer","state","inputValue","onInputChange","e","setState","target","value","onSubmit","preventDefault","onInputAnswer","this","autoFocus","type","placeholder","onChange","Component","randomGen","max","Math","floor","random","Sub","firstNum","randomIntGen","secondNum","rightAnswerCounter","wrongAnswerCounter","userAnswer","revertAnswer","split","reverse","join","console","log","sub","Add","add","Mul","mul","Dev","dev","Expression","selectedExpression","btns","App","clearState","error","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e4038cd6.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = props => {\r\n  const expressionBtns = props.buttons.map(btn => {\r\n    return (\r\n      <button\r\n        className={ `btn btn-outline-${btn.cls} ` + (props.selectedBtn[btn.id] && \"active\") }\r\n        key={ btn.id }\r\n        onClick={ () => { props.btnClicked(btn.id); } }\r\n      > { btn.label }\r\n      </button>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <nav className=\"navbar navbar-expand bg-transparent mb-3\" >\r\n      <div className=\"container justify-content-around\">\r\n\r\n        { expressionBtns }\r\n\r\n      </div>\r\n    </nav >\r\n  );\r\n};;\r\nexport default Header;","import React, { Component } from \"react\";\r\nimport \"./inputAnswer.css\";\r\n\r\nexport default class InputAnswer extends Component {\r\n  state = {\r\n    inputValue: \"\",\r\n  };\r\n\r\n  onInputChange = (e) => {\r\n    this.setState({\r\n      inputValue: e.target.value,\r\n    });\r\n  };\r\n\r\n  onSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.onInputAnswer(this.state.inputValue);\r\n    this.setState({\r\n      inputValue: \"\",\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { inputValue } = this.state;\r\n\r\n    return (\r\n      <form className=\"answer-form\" onSubmit={ this.onSubmit }>\r\n        <input\r\n          autoFocus\r\n          className=\"input-answer\"\r\n          type=\"number\"\r\n          placeholder=\"...\"\r\n          onChange={ this.onInputChange }\r\n          value={ inputValue }\r\n        />\r\n        {/* <button className=\"btn btn-outline-info submit-answer-btn\" type=\"submit\">\r\n          <span>&#10003;</span>\r\n        </button> */}\r\n      </form>\r\n    );\r\n  }\r\n}\r\n","export default function randomGen(max) {\r\n  return Math.floor(Math.random() * max + 1);\r\n}\r\n","import React, { Component } from \"react\";\r\nimport InputAnswer from \"../inputAnswer/inputAnswer\";\r\nimport randomIntGen from \"../randomIntGen/randomIntGen\";\r\n\r\nexport default class Sub extends Component {\r\n\r\n  state = {\r\n    firstNum: randomIntGen(1000),\r\n    secondNum: randomIntGen(1000),\r\n    rightAnswerCounter: 0,\r\n    wrongAnswerCounter: 0,\r\n  };\r\n\r\n  sub() {\r\n    if (this.state.firstNum < this.state.secondNum) {\r\n      [this.state.firstNum, this.state.secondNum] = [\r\n        this.state.secondNum,\r\n        this.state.firstNum,\r\n      ];\r\n    }\r\n\r\n    const checkAnswer = (userAnswer) => {\r\n      if (!userAnswer) {\r\n        return;\r\n      }\r\n\r\n      //reverse answer form bidi:override input\r\n      const revertAnswer = userAnswer.split(\"\").reverse().join(\"\");\r\n\r\n      //try to use EqualTo() or something like this;\r\n      // eslint-disable-next-line eqeqeq\r\n      if (revertAnswer == this.state.firstNum - this.state.secondNum) {\r\n        this.setState(({ rightAnswerCounter }) => {\r\n          return {\r\n            firstNum: randomIntGen(1000),\r\n            secondNum: randomIntGen(1000),\r\n            rightAnswerCounter: rightAnswerCounter + 1,\r\n          };\r\n        });\r\n      } else {\r\n        this.setState(({ wrongAnswerCounter }) => {\r\n          return {\r\n            wrongAnswerCounter: wrongAnswerCounter + 1,\r\n          };\r\n        });\r\n      }\r\n\r\n      console.log(`Right answer = ${this.state.firstNum - this.state.secondNum} \\nUser input   = ${revertAnswer}`);\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"h3\">\r\n          <span className=\"text-success d-block\">\r\n            Верно: { this.state.rightAnswerCounter }\r\n          </span>\r\n          <span className=\"text-danger\">\r\n            Мимо: { this.state.wrongAnswerCounter }\r\n          </span>\r\n        </div>\r\n        <hr />\r\n        <br />\r\n\r\n        <div className=\"expr-container\">\r\n          <div className=\"expression-wrapper\">\r\n            <div className=\"number-box \">\r\n\r\n              <div className=\"num\">\r\n                { this.state.firstNum }\r\n              </div>\r\n\r\n              <span className=\"expr-symbol\"> - </span>\r\n\r\n              <div className=\"num\">\r\n                { this.state.secondNum }\r\n\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"num\">\r\n              <InputAnswer onInputAnswer={ checkAnswer } />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return this.sub();\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport InputAnswer from \"../inputAnswer/inputAnswer\";\r\nimport randomIntGen from \"../randomIntGen/randomIntGen\";\r\n\r\nexport default class Add extends Component {\r\n\r\n  state = {\r\n    firstNum: randomIntGen(1000),\r\n    secondNum: randomIntGen(1000),\r\n    rightAnswerCounter: 0,\r\n    wrongAnswerCounter: 0,\r\n  };\r\n\r\n  add() {\r\n    const checkAnswer = (userAnswer) => {\r\n      if (!userAnswer) {\r\n        return;\r\n      }\r\n\r\n      //reverse answer form bidi:override input\r\n      const revertAnswer = userAnswer.split(\"\").reverse().join(\"\");\r\n\r\n      //try to use EqualTo() or something like this;\r\n      // eslint-disable-next-line eqeqeq\r\n      if (revertAnswer == this.state.firstNum + this.state.secondNum) {\r\n        //count rightAnswer\r\n        this.setState(({ rightAnswerCounter }) => {\r\n          return {\r\n            firstNum: randomIntGen(1000),\r\n            secondNum: randomIntGen(1000),\r\n            rightAnswerCounter: rightAnswerCounter + 1,\r\n          };\r\n        });\r\n      } else {\r\n        //count wrongAnswer\r\n        this.setState(({ wrongAnswerCounter }) => {\r\n          return {\r\n            wrongAnswerCounter: wrongAnswerCounter + 1,\r\n          };\r\n        });\r\n      }\r\n\r\n      //show answer in console\r\n      console.log(`Right answer = ${this.state.firstNum + this.state.secondNum} \\n User input   = ${revertAnswer}`);\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"h3\">\r\n          <span className=\"text-success d-block\">\r\n            Верно: { this.state.rightAnswerCounter }\r\n          </span>\r\n          <span className=\"text-danger\">\r\n            Мимо: { this.state.wrongAnswerCounter }\r\n          </span>\r\n        </div>\r\n        <hr />\r\n        <br />\r\n\r\n        <div className=\"expr-container\">\r\n          <div className=\"expression-wrapper\">\r\n            <div className=\"number-box \">\r\n\r\n              <div className=\"num\">\r\n                { this.state.firstNum }\r\n              </div>\r\n\r\n              <span className=\"expr-symbol\"> + </span>\r\n\r\n              <div className=\"num\">\r\n                { this.state.secondNum }\r\n\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"num\">\r\n              <InputAnswer onInputAnswer={ checkAnswer } />\r\n            </div>\r\n\r\n          </div>\r\n        </div >\r\n      </div >\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return this.add();\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport InputAnswer from \"../inputAnswer/inputAnswer\";\r\nimport randomIntGen from \"../randomIntGen/randomIntGen\";\r\nimport \"./mul.css\";\r\n\r\nexport default class Mul extends Component {\r\n\r\n  state = {\r\n    firstNum: randomIntGen(100),\r\n    secondNum: randomIntGen(100),\r\n    rightAnswerCounter: 0,\r\n    wrongAnswerCounter: 0,\r\n  };\r\n\r\n  mul() {\r\n    const checkAnswer = (userAnswer) => {\r\n      if (!userAnswer) {\r\n        return;\r\n      }\r\n\r\n      //reverse answer form bidi:override input\r\n      const revertAnswer = userAnswer.split(\"\").reverse().join(\"\");\r\n\r\n      console.log(revertAnswer, this.state.firstNum, this.state.secondNum);\r\n\r\n      //try to use EqualTo() or something like this;\r\n      // eslint-disable-next-line eqeqeq\r\n      if (revertAnswer == this.state.firstNum * this.state.secondNum) {\r\n        //make count of rightAnswer\r\n        this.setState(({ rightAnswerCounter }) => {\r\n          return {\r\n            firstNum: randomIntGen(100),\r\n            secondNum: randomIntGen(100),\r\n            rightAnswerCounter: rightAnswerCounter + 1,\r\n          };\r\n        });\r\n      } else {\r\n        //make count of wrongAnswer\r\n        this.setState(({ wrongAnswerCounter }) => {\r\n          return {\r\n            wrongAnswerCounter: wrongAnswerCounter + 1,\r\n          };\r\n        });\r\n      }\r\n\r\n      console.log(`Right answer = ${this.state.firstNum * this.state.secondNum} \\n User input   = ${revertAnswer}`);\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"h3\">\r\n          <span className=\"text-success d-block\">\r\n            Верно: { this.state.rightAnswerCounter }\r\n          </span>\r\n          <span className=\"text-danger\">\r\n            Мимо: { this.state.wrongAnswerCounter }\r\n          </span>\r\n        </div>\r\n        <hr />\r\n        <br />\r\n\r\n        <div className=\"expr-container\">\r\n          <div className=\"expression-wrapper\">\r\n            <div className=\"number-box \">\r\n\r\n              <div className=\"num\">\r\n                { this.state.firstNum }\r\n              </div>\r\n\r\n              <span className=\"expr-symbol mul-symbol\"> * </span>\r\n\r\n              <div className=\"num\">\r\n                { this.state.secondNum }\r\n\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"num\">\r\n              <InputAnswer onInputAnswer={ checkAnswer } />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return this.mul();\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport InputAnswer from \"../inputAnswer/inputAnswer\";\r\nimport randomIntGen from \"../randomIntGen/randomIntGen\";\r\nimport \"./dev.css\";\r\n\r\nexport default class Dev extends Component {\r\n\r\n  state = {\r\n    firstNum: randomIntGen(1000),\r\n    secondNum: randomIntGen(10),\r\n    rightAnswerCounter: 0,\r\n    wrongAnswerCounter: 0,\r\n  };\r\n\r\n  dev() {\r\n    const checkAnswer = (userAnswer) => {\r\n      if (!userAnswer) {\r\n        return;\r\n      }\r\n\r\n      //try to use EqualTo() or something like this;\r\n      // eslint-disable-next-line eqeqeq\r\n      if (userAnswer == (this.state.firstNum * this.state.secondNum) / this.state.secondNum) {\r\n        //make count of rightAnswer\r\n        this.setState(({ rightAnswerCounter }) => {\r\n          return {\r\n            rightAnswerCounter: rightAnswerCounter + 1,\r\n            firstNum: randomIntGen(1000),\r\n            secondNum: randomIntGen(10),\r\n          };\r\n        });\r\n      } else {\r\n        //make count of wrongAnswer\r\n        this.setState(({ wrongAnswerCounter }) => {\r\n          return {\r\n            wrongAnswerCounter: wrongAnswerCounter + 1,\r\n          };\r\n        });\r\n      }\r\n\r\n      console.log(`Right answer = ${(this.state.firstNum * this.state.secondNum) / this.state.secondNum} \\nUser input   = ${userAnswer}`);\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"h3\">\r\n          <span className=\"text-success d-block\">\r\n            Верно: { this.state.rightAnswerCounter }\r\n          </span>\r\n          <span className=\"text-danger\">\r\n            Мимо: { this.state.wrongAnswerCounter }\r\n          </span>\r\n        </div>\r\n        <hr />\r\n        <br />\r\n\r\n        <div className=\"dev-container\">\r\n          <div className=\"dividend\">\r\n            { this.state.firstNum * this.state.secondNum }\r\n            <div className=\"divisor\">{ this.state.secondNum }\r\n              <div className=\"dev-answer\">\r\n                <InputAnswer onInputAnswer={ checkAnswer } />\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return this.dev();\r\n  }\r\n}\r\n","import Sub from \"./sub\";\r\nimport Add from \"./add\";\r\nimport Mul from \"./mul\";\r\nimport Dev from \"./dev\";\r\nimport \"./expression.css\";\r\n\r\nconst Expression = props => {\r\n\r\n  return (\r\n    <div>\r\n      { props.selectedExpression.add && <Add /> }\r\n      { props.selectedExpression.sub && <Sub /> }\r\n      { props.selectedExpression.dev && <Dev /> }\r\n      { props.selectedExpression.mul && <Mul /> }\r\n    </div>\r\n  );\r\n\r\n\r\n};\r\n\r\nexport default Expression;","import React, { Component } from \"react\";\r\nimport Header from \"../header/header\";\r\nimport \"./bootstrap.min.css\";\r\nimport \"./style.css\";\r\nimport Expression from \"../expressions/Expression\";\r\n\r\nconst version = \"v1.03\";\r\n\r\nconst btns = [\r\n  { label: \"+\", id: \"add\", cls: \"danger\" },\r\n  { label: \"-\", id: \"sub\", cls: \"warning\" },\r\n  { label: \"*\", id: \"mul\", cls: \"success\" },\r\n  { label: \"/\", id: \"dev\", cls: \"primary\" },\r\n];\r\n\r\nexport default class App extends Component {\r\n\r\n  state = {\r\n    add: true,\r\n    sub: false,\r\n    mul: false,\r\n    dev: false,\r\n  };\r\n\r\n  clearState = () => {\r\n    this.setState(() => {\r\n      return {\r\n        add: false,\r\n        sub: false,\r\n        mul: false,\r\n        dev: false,\r\n      };\r\n    });\r\n  };\r\n\r\n  btnClicked = (btn) => {\r\n    // console.log(` Btn clicked form App.js => ${btn}`);\r\n\r\n    this.clearState();\r\n\r\n    switch (btn) {\r\n      case \"add\":\r\n        this.setState(({ add: true }));\r\n        break;\r\n\r\n      case \"sub\":\r\n        this.setState(({ sub: true }));\r\n        break;\r\n\r\n      case \"mul\":\r\n        this.setState(({ mul: true }));\r\n        break;\r\n\r\n      case \"dev\":\r\n        this.setState(({ dev: true }));\r\n        break;\r\n\r\n      default:\r\n        console.error(\"Wrong heder props (clickedBtn)\");\r\n        break;\r\n    }\r\n\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\" >\r\n        <div className=\"version\">{ version }</div>\r\n        <Header\r\n          buttons={ btns }\r\n          btnClicked={ this.btnClicked }\r\n          selectedBtn={ this.state }\r\n        />\r\n        <hr />\r\n        <Expression selectedExpression={ this.state } />\r\n      </div>\r\n    );\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./componets/app/app\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}