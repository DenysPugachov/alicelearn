{"version":3,"sources":["componets/header/header.js","componets/inputAnswer/inputAnswer.js","componets/randomIntGen/randomIntGen.js","componets/expressions/sub.js","componets/expressions/add.js","componets/expressions/mul.js","componets/expressions/dev.js","componets/expressions/Expression.js","componets/app/app.js","index.js"],"names":["Header","props","expressionBtns","buttons","map","btn","btnStatus","selectedBtn","id","cls","color","className","join","onClick","btnClicked","label","InputAnswer","state","inputValue","onInputChange","e","setState","target","value","onSubmit","preventDefault","onInputAnswer","this","autoFocus","type","placeholder","onChange","Component","randomGen","max","Math","floor","random","Sub","firstNum","randomIntGen","secondNum","rightAnswerCounter","wrongAnswerCounter","userAnswer","revertAnswer","split","reverse","console","log","sub","Add","add","Mul","mul","Dev","dev","Expression","showExpression","selectedExpression","btns","App","useState","setShownExpression","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yRA+BeA,EA7BA,SAAAC,GAEb,IAAMC,EAAiBD,EAAME,QAAQC,KAAI,SAAAC,GAEvC,IAAMC,EAAaL,EAAMM,cAAgBF,EAAIG,IAAO,SAE9CC,EAAM,CAAC,MAAD,sBAAuBJ,EAAIK,OAASJ,GAEhD,OACE,yBACEK,UAAYF,EAAIG,KAAK,KAErBC,QAAU,WAAQZ,EAAMa,WAAWT,EAAIG,KAHzC,cAIIH,EAAIU,QAFAV,EAAIG,OAOhB,OACE,qBAAKG,UAAU,2CAAf,SACE,qBAAKA,UAAU,mCAAf,SAEIT,O,0CCrBWc,G,kNACnBC,MAAQ,CACNC,WAAY,I,EAGdC,cAAgB,SAACC,GACf,EAAKC,SAAS,CACZH,WAAYE,EAAEE,OAAOC,S,EAIzBC,SAAW,SAACJ,GACVA,EAAEK,iBACF,EAAKxB,MAAMyB,cAAc,EAAKT,MAAMC,YACpC,EAAKG,SAAS,CACZH,WAAY,M,uDAIN,IACAA,EAAeS,KAAKV,MAApBC,WAER,OACE,sBAAMP,UAAU,cAAca,SAAWG,KAAKH,SAA9C,SACE,uBACEI,WAAS,EACTjB,UAAU,eACVkB,KAAK,SACLC,YAAY,MACZC,SAAWJ,KAAKR,cAChBI,MAAQL,U,GA9BuBc,cCH1B,SAASC,EAAUC,GAChC,OAAOC,KAAKC,MAAMD,KAAKE,SAAWH,EAAM,G,ICGrBI,E,4MAEnBrB,MAAQ,CACNsB,SAAUC,EAAa,KACvBC,UAAWD,EAAa,KACxBE,mBAAoB,EACpBC,mBAAoB,G,oDAGf,IAAD,OACJ,GAAIhB,KAAKV,MAAMsB,SAAWZ,KAAKV,MAAMwB,UAAW,CAAC,IAAD,EACA,CAC5Cd,KAAKV,MAAMwB,UACXd,KAAKV,MAAMsB,UAFZZ,KAAKV,MAAMsB,SADkC,KACxBZ,KAAKV,MAAMwB,UADa,KAoChD,OACE,gCACE,sBAAK9B,UAAU,KAAf,UACE,uBAAMA,UAAU,uBAAhB,6CACWgB,KAAKV,MAAMyB,sBAEtB,uBAAM/B,UAAU,cAAhB,uCACUgB,KAAKV,MAAM0B,yBAGvB,uBACA,uBAEA,qBAAKhC,UAAU,iBAAf,SACE,sBAAKA,UAAU,qBAAf,UACE,sBAAKA,UAAU,cAAf,UAEE,qBAAKA,UAAU,MAAf,SACIgB,KAAKV,MAAMsB,WAGf,sBAAM5B,UAAU,cAAhB,iBAEA,qBAAKA,UAAU,MAAf,SACIgB,KAAKV,MAAMwB,eAKjB,qBAAK9B,UAAU,MAAf,SACE,cAAC,EAAD,CAAae,cA3DH,SAACkB,GACnB,GAAKA,EAAL,CAKA,IAAMC,EAAeD,EAAWE,MAAM,IAAIC,UAAUnC,KAAK,IAIrDiC,GAAgB,EAAK5B,MAAMsB,SAAW,EAAKtB,MAAMwB,UACnD,EAAKpB,UAAS,YAA6B,IAA1BqB,EAAyB,EAAzBA,mBACf,MAAO,CACLH,SAAUC,EAAa,KACvBC,UAAWD,EAAa,KACxBE,mBAAoBA,EAAqB,MAI7C,EAAKrB,UAAS,YACZ,MAAO,CACLsB,mBAFsC,EAAzBA,mBAE4B,MAK/CK,QAAQC,IAAR,yBAA8B,EAAKhC,MAAMsB,SAAW,EAAKtB,MAAMwB,UAA/D,6BAA6FI,oB,+BA0C/F,OAAOlB,KAAKuB,U,GArFiBlB,aCAZmB,E,4MAEnBlC,MAAQ,CACNsB,SAAUC,EAAa,KACvBC,UAAWD,EAAa,KACxBE,mBAAoB,EACpBC,mBAAoB,G,oDAGf,IAAD,OAiCJ,OACE,gCACE,sBAAKhC,UAAU,KAAf,UACE,uBAAMA,UAAU,uBAAhB,6CACWgB,KAAKV,MAAMyB,sBAEtB,uBAAM/B,UAAU,cAAhB,uCACUgB,KAAKV,MAAM0B,yBAGvB,uBACA,uBAEA,qBAAKhC,UAAU,iBAAf,SACE,sBAAKA,UAAU,qBAAf,UACE,sBAAKA,UAAU,cAAf,UAEE,qBAAKA,UAAU,MAAf,SACIgB,KAAKV,MAAMsB,WAGf,sBAAM5B,UAAU,cAAhB,iBAEA,qBAAKA,UAAU,MAAf,SACIgB,KAAKV,MAAMwB,eAKjB,qBAAK9B,UAAU,MAAf,SACE,cAAC,EAAD,CAAae,cA9DH,SAACkB,GACnB,GAAKA,EAAL,CAKA,IAAMC,EAAeD,EAAWE,MAAM,IAAIC,UAAUnC,KAAK,IAIrDiC,GAAgB,EAAK5B,MAAMsB,SAAW,EAAKtB,MAAMwB,UAEnD,EAAKpB,UAAS,YAA6B,IAA1BqB,EAAyB,EAAzBA,mBACf,MAAO,CACLH,SAAUC,EAAa,KACvBC,UAAWD,EAAa,KACxBE,mBAAoBA,EAAqB,MAK7C,EAAKrB,UAAS,YACZ,MAAO,CACLsB,mBAFsC,EAAzBA,mBAE4B,MAM/CK,QAAQC,IAAR,yBAA8B,EAAKhC,MAAMsB,SAAW,EAAKtB,MAAMwB,UAA/D,8BAA8FI,oB,+BA2ChG,OAAOlB,KAAKyB,U,GAlFiBpB,aCCZqB,G,kNAEnBpC,MAAQ,CACNsB,SAAUC,EAAa,KACvBC,UAAWD,EAAa,KACxBE,mBAAoB,EACpBC,mBAAoB,G,oDAGf,IAAD,OAkCJ,OACE,gCACE,sBAAKhC,UAAU,KAAf,UACE,uBAAMA,UAAU,uBAAhB,6CACWgB,KAAKV,MAAMyB,sBAEtB,uBAAM/B,UAAU,cAAhB,uCACUgB,KAAKV,MAAM0B,yBAGvB,uBACA,uBAEA,qBAAKhC,UAAU,iBAAf,SACE,sBAAKA,UAAU,qBAAf,UACE,sBAAKA,UAAU,cAAf,UAEE,qBAAKA,UAAU,MAAf,SACIgB,KAAKV,MAAMsB,WAGf,sBAAM5B,UAAU,yBAAhB,iBAEA,qBAAKA,UAAU,MAAf,SACIgB,KAAKV,MAAMwB,eAKjB,qBAAK9B,UAAU,MAAf,SACE,cAAC,EAAD,CAAae,cA/DH,SAACkB,GACnB,GAAKA,EAAL,CAKA,IAAMC,EAAeD,EAAWE,MAAM,IAAIC,UAAUnC,KAAK,IAEzDoC,QAAQC,IAAIJ,EAAc,EAAK5B,MAAMsB,SAAU,EAAKtB,MAAMwB,WAItDI,GAAgB,EAAK5B,MAAMsB,SAAW,EAAKtB,MAAMwB,UAEnD,EAAKpB,UAAS,YAA6B,IAA1BqB,EAAyB,EAAzBA,mBACf,MAAO,CACLH,SAAUC,EAAa,KACvBC,UAAWD,EAAa,KACxBE,mBAAoBA,EAAqB,MAK7C,EAAKrB,UAAS,YACZ,MAAO,CACLsB,mBAFsC,EAAzBA,mBAE4B,MAK/CK,QAAQC,IAAR,yBAA8B,EAAKhC,MAAMsB,SAAW,EAAKtB,MAAMwB,UAA/D,8BAA8FI,oB,+BA0ChG,OAAOlB,KAAK2B,U,GAlFiBtB,cCAZuB,G,kNAEnBtC,MAAQ,CACNsB,SAAUC,EAAa,KACvBC,UAAWD,EAAa,IACxBE,mBAAoB,EACpBC,mBAAoB,G,oDAGf,IAAD,OA6BJ,OACE,gCACE,sBAAKhC,UAAU,KAAf,UACE,uBAAMA,UAAU,uBAAhB,6CACWgB,KAAKV,MAAMyB,sBAEtB,uBAAM/B,UAAU,cAAhB,uCACUgB,KAAKV,MAAM0B,yBAGvB,uBACA,uBAEA,qBAAKhC,UAAU,gBAAf,SACE,sBAAKA,UAAU,WAAf,UACIgB,KAAKV,MAAMsB,SAAWZ,KAAKV,MAAMwB,UACnC,sBAAK9B,UAAU,UAAf,UAA2BgB,KAAKV,MAAMwB,UACpC,qBAAK9B,UAAU,aAAf,SACE,cAAC,EAAD,CAAae,cA9CL,SAACkB,GACdA,IAMDA,GAAe,EAAK3B,MAAMsB,SAAW,EAAKtB,MAAMwB,UAAa,EAAKxB,MAAMwB,UAE1E,EAAKpB,UAAS,YACZ,MAAO,CACLqB,mBAFsC,EAAzBA,mBAE4B,EACzCH,SAAUC,EAAa,KACvBC,UAAWD,EAAa,QAK5B,EAAKnB,UAAS,YACZ,MAAO,CACLsB,mBAFsC,EAAzBA,mBAE4B,MAK/CK,QAAQC,IAAR,yBAA+B,EAAKhC,MAAMsB,SAAW,EAAKtB,MAAMwB,UAAa,EAAKxB,MAAMwB,UAAxF,6BAAsHG,uB,+BAiCxH,OAAOjB,KAAK6B,U,GApEiBxB,cCiBlByB,G,MAhBI,SAAAxD,GAEjB,IAAMyD,EAAiBzD,EAAM0D,mBAE7B,OACE,gCACuB,QAAnBD,GAA4B,cAAC,EAAD,IACT,QAAnBA,GAA4B,cAAC,EAAD,IACT,QAAnBA,GAA4B,cAAC,EAAD,IACT,QAAnBA,GAA4B,cAAC,EAAD,SCP9BE,EAAO,CACX,CAAE7C,MAAO,IAAKP,GAAI,MAAOE,MAAO,UAChC,CAAEK,MAAO,IAAKP,GAAI,MAAOE,MAAO,WAChC,CAAEK,MAAO,IAAKP,GAAI,MAAOE,MAAO,WAChC,CAAEK,MAAO,IAAKP,GAAI,MAAOE,MAAO,YAwBnBmD,EArBH,WAAO,IAAD,EAE6BC,mBAAS,OAFtC,mBAETJ,EAFS,KAEOK,EAFP,KAMhB,OACE,sBAAKpD,UAAU,YAAf,UACE,qBAAKA,UAAU,UAAf,SAjBa,UAkBb,cAAC,EAAD,CACER,QAAUyD,EACV9C,WAPe,SAAAT,GAAG,OAAI0D,EAAmB1D,IAQzCE,YAAcmD,IAEhB,uBACA,cAAC,EAAD,CAAYC,mBAAqBD,QC1BvCM,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.8d4b73d9.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = props => {\r\n\r\n  const expressionBtns = props.buttons.map(btn => {\r\n\r\n    const btnStatus = (props.selectedBtn === btn.id) && \"active\";\r\n\r\n    const cls = [\"btn\", `btn-outline-${btn.color}`, btnStatus];\r\n\r\n    return (\r\n      <button\r\n        className={ cls.join(\" \") }\r\n        key={ btn.id }\r\n        onClick={ () => { props.btnClicked(btn.id); } }\r\n      > { btn.label }\r\n      </button>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <nav className=\"navbar navbar-expand bg-transparent mb-3\" >\r\n      <div className=\"container justify-content-around\">\r\n\r\n        { expressionBtns }\r\n\r\n      </div>\r\n    </nav >\r\n  );\r\n};\r\n\r\nexport default Header;","import React, { Component } from \"react\";\r\nimport \"./inputAnswer.css\";\r\n\r\nexport default class InputAnswer extends Component {\r\n  state = {\r\n    inputValue: \"\",\r\n  };\r\n\r\n  onInputChange = (e) => {\r\n    this.setState({\r\n      inputValue: e.target.value,\r\n    });\r\n  };\r\n\r\n  onSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.onInputAnswer(this.state.inputValue);\r\n    this.setState({\r\n      inputValue: \"\",\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { inputValue } = this.state;\r\n\r\n    return (\r\n      <form className=\"answer-form\" onSubmit={ this.onSubmit }>\r\n        <input\r\n          autoFocus\r\n          className=\"input-answer\"\r\n          type=\"number\"\r\n          placeholder=\"...\"\r\n          onChange={ this.onInputChange }\r\n          value={ inputValue }\r\n        />\r\n        {/* <button className=\"btn btn-outline-info submit-answer-btn\" type=\"submit\">\r\n          <span>&#10003;</span>\r\n        </button> */}\r\n      </form>\r\n    );\r\n  }\r\n}\r\n","export default function randomGen(max) {\r\n  return Math.floor(Math.random() * max + 1);\r\n}\r\n","import React, { Component } from \"react\";\r\nimport InputAnswer from \"../inputAnswer/inputAnswer\";\r\nimport randomIntGen from \"../randomIntGen/randomIntGen\";\r\n\r\nexport default class Sub extends Component {\r\n\r\n  state = {\r\n    firstNum: randomIntGen(1000),\r\n    secondNum: randomIntGen(1000),\r\n    rightAnswerCounter: 0,\r\n    wrongAnswerCounter: 0,\r\n  };\r\n\r\n  sub() {\r\n    if (this.state.firstNum < this.state.secondNum) {\r\n      [this.state.firstNum, this.state.secondNum] = [\r\n        this.state.secondNum,\r\n        this.state.firstNum,\r\n      ];\r\n    }\r\n\r\n    const checkAnswer = (userAnswer) => {\r\n      if (!userAnswer) {\r\n        return;\r\n      }\r\n\r\n      //reverse answer form bidi:override input\r\n      const revertAnswer = userAnswer.split(\"\").reverse().join(\"\");\r\n\r\n      //try to use EqualTo() or something like this;\r\n      // eslint-disable-next-line eqeqeq\r\n      if (revertAnswer == this.state.firstNum - this.state.secondNum) {\r\n        this.setState(({ rightAnswerCounter }) => {\r\n          return {\r\n            firstNum: randomIntGen(1000),\r\n            secondNum: randomIntGen(1000),\r\n            rightAnswerCounter: rightAnswerCounter + 1,\r\n          };\r\n        });\r\n      } else {\r\n        this.setState(({ wrongAnswerCounter }) => {\r\n          return {\r\n            wrongAnswerCounter: wrongAnswerCounter + 1,\r\n          };\r\n        });\r\n      }\r\n\r\n      console.log(`Right answer = ${this.state.firstNum - this.state.secondNum} \\nUser input   = ${revertAnswer}`);\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"h3\">\r\n          <span className=\"text-success d-block\">\r\n            Верно: { this.state.rightAnswerCounter }\r\n          </span>\r\n          <span className=\"text-danger\">\r\n            Мимо: { this.state.wrongAnswerCounter }\r\n          </span>\r\n        </div>\r\n        <hr />\r\n        <br />\r\n\r\n        <div className=\"expr-container\">\r\n          <div className=\"expression-wrapper\">\r\n            <div className=\"number-box \">\r\n\r\n              <div className=\"num\">\r\n                { this.state.firstNum }\r\n              </div>\r\n\r\n              <span className=\"expr-symbol\"> - </span>\r\n\r\n              <div className=\"num\">\r\n                { this.state.secondNum }\r\n\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"num\">\r\n              <InputAnswer onInputAnswer={ checkAnswer } />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return this.sub();\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport InputAnswer from \"../inputAnswer/inputAnswer\";\r\nimport randomIntGen from \"../randomIntGen/randomIntGen\";\r\n\r\nexport default class Add extends Component {\r\n\r\n  state = {\r\n    firstNum: randomIntGen(1000),\r\n    secondNum: randomIntGen(1000),\r\n    rightAnswerCounter: 0,\r\n    wrongAnswerCounter: 0,\r\n  };\r\n\r\n  add() {\r\n    const checkAnswer = (userAnswer) => {\r\n      if (!userAnswer) {\r\n        return;\r\n      }\r\n\r\n      //reverse answer form bidi:override input\r\n      const revertAnswer = userAnswer.split(\"\").reverse().join(\"\");\r\n\r\n      //try to use EqualTo() or something like this;\r\n      // eslint-disable-next-line eqeqeq\r\n      if (revertAnswer == this.state.firstNum + this.state.secondNum) {\r\n        //count rightAnswer\r\n        this.setState(({ rightAnswerCounter }) => {\r\n          return {\r\n            firstNum: randomIntGen(1000),\r\n            secondNum: randomIntGen(1000),\r\n            rightAnswerCounter: rightAnswerCounter + 1,\r\n          };\r\n        });\r\n      } else {\r\n        //count wrongAnswer\r\n        this.setState(({ wrongAnswerCounter }) => {\r\n          return {\r\n            wrongAnswerCounter: wrongAnswerCounter + 1,\r\n          };\r\n        });\r\n      }\r\n\r\n      //show answer in console\r\n      console.log(`Right answer = ${this.state.firstNum + this.state.secondNum} \\n User input   = ${revertAnswer}`);\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"h3\">\r\n          <span className=\"text-success d-block\">\r\n            Верно: { this.state.rightAnswerCounter }\r\n          </span>\r\n          <span className=\"text-danger\">\r\n            Мимо: { this.state.wrongAnswerCounter }\r\n          </span>\r\n        </div>\r\n        <hr />\r\n        <br />\r\n\r\n        <div className=\"expr-container\">\r\n          <div className=\"expression-wrapper\">\r\n            <div className=\"number-box \">\r\n\r\n              <div className=\"num\">\r\n                { this.state.firstNum }\r\n              </div>\r\n\r\n              <span className=\"expr-symbol\"> + </span>\r\n\r\n              <div className=\"num\">\r\n                { this.state.secondNum }\r\n\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"num\">\r\n              <InputAnswer onInputAnswer={ checkAnswer } />\r\n            </div>\r\n\r\n          </div>\r\n        </div >\r\n      </div >\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return this.add();\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport InputAnswer from \"../inputAnswer/inputAnswer\";\r\nimport randomIntGen from \"../randomIntGen/randomIntGen\";\r\nimport \"./mul.css\";\r\n\r\nexport default class Mul extends Component {\r\n\r\n  state = {\r\n    firstNum: randomIntGen(100),\r\n    secondNum: randomIntGen(100),\r\n    rightAnswerCounter: 0,\r\n    wrongAnswerCounter: 0,\r\n  };\r\n\r\n  mul() {\r\n    const checkAnswer = (userAnswer) => {\r\n      if (!userAnswer) {\r\n        return;\r\n      }\r\n\r\n      //reverse answer form bidi:override input\r\n      const revertAnswer = userAnswer.split(\"\").reverse().join(\"\");\r\n\r\n      console.log(revertAnswer, this.state.firstNum, this.state.secondNum);\r\n\r\n      //try to use EqualTo() or something like this;\r\n      // eslint-disable-next-line eqeqeq\r\n      if (revertAnswer == this.state.firstNum * this.state.secondNum) {\r\n        //make count of rightAnswer\r\n        this.setState(({ rightAnswerCounter }) => {\r\n          return {\r\n            firstNum: randomIntGen(100),\r\n            secondNum: randomIntGen(100),\r\n            rightAnswerCounter: rightAnswerCounter + 1,\r\n          };\r\n        });\r\n      } else {\r\n        //make count of wrongAnswer\r\n        this.setState(({ wrongAnswerCounter }) => {\r\n          return {\r\n            wrongAnswerCounter: wrongAnswerCounter + 1,\r\n          };\r\n        });\r\n      }\r\n\r\n      console.log(`Right answer = ${this.state.firstNum * this.state.secondNum} \\n User input   = ${revertAnswer}`);\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"h3\">\r\n          <span className=\"text-success d-block\">\r\n            Верно: { this.state.rightAnswerCounter }\r\n          </span>\r\n          <span className=\"text-danger\">\r\n            Мимо: { this.state.wrongAnswerCounter }\r\n          </span>\r\n        </div>\r\n        <hr />\r\n        <br />\r\n\r\n        <div className=\"expr-container\">\r\n          <div className=\"expression-wrapper\">\r\n            <div className=\"number-box \">\r\n\r\n              <div className=\"num\">\r\n                { this.state.firstNum }\r\n              </div>\r\n\r\n              <span className=\"expr-symbol mul-symbol\"> * </span>\r\n\r\n              <div className=\"num\">\r\n                { this.state.secondNum }\r\n\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"num\">\r\n              <InputAnswer onInputAnswer={ checkAnswer } />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return this.mul();\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport InputAnswer from \"../inputAnswer/inputAnswer\";\r\nimport randomIntGen from \"../randomIntGen/randomIntGen\";\r\nimport \"./dev.css\";\r\n\r\nexport default class Dev extends Component {\r\n\r\n  state = {\r\n    firstNum: randomIntGen(1000),\r\n    secondNum: randomIntGen(10),\r\n    rightAnswerCounter: 0,\r\n    wrongAnswerCounter: 0,\r\n  };\r\n\r\n  dev() {\r\n    const checkAnswer = (userAnswer) => {\r\n      if (!userAnswer) {\r\n        return;\r\n      }\r\n\r\n      //try to use EqualTo() or something like this;\r\n      // eslint-disable-next-line eqeqeq\r\n      if (userAnswer == (this.state.firstNum * this.state.secondNum) / this.state.secondNum) {\r\n        //make count of rightAnswer\r\n        this.setState(({ rightAnswerCounter }) => {\r\n          return {\r\n            rightAnswerCounter: rightAnswerCounter + 1,\r\n            firstNum: randomIntGen(1000),\r\n            secondNum: randomIntGen(10),\r\n          };\r\n        });\r\n      } else {\r\n        //make count of wrongAnswer\r\n        this.setState(({ wrongAnswerCounter }) => {\r\n          return {\r\n            wrongAnswerCounter: wrongAnswerCounter + 1,\r\n          };\r\n        });\r\n      }\r\n\r\n      console.log(`Right answer = ${(this.state.firstNum * this.state.secondNum) / this.state.secondNum} \\nUser input   = ${userAnswer}`);\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"h3\">\r\n          <span className=\"text-success d-block\">\r\n            Верно: { this.state.rightAnswerCounter }\r\n          </span>\r\n          <span className=\"text-danger\">\r\n            Мимо: { this.state.wrongAnswerCounter }\r\n          </span>\r\n        </div>\r\n        <hr />\r\n        <br />\r\n\r\n        <div className=\"dev-container\">\r\n          <div className=\"dividend\">\r\n            { this.state.firstNum * this.state.secondNum }\r\n            <div className=\"divisor\">{ this.state.secondNum }\r\n              <div className=\"dev-answer\">\r\n                <InputAnswer onInputAnswer={ checkAnswer } />\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return this.dev();\r\n  }\r\n}\r\n","import Sub from \"./sub\";\r\nimport Add from \"./add\";\r\nimport Mul from \"./mul\";\r\nimport Dev from \"./dev\";\r\nimport \"./expression.css\";\r\n\r\nconst Expression = props => {\r\n\r\n  const showExpression = props.selectedExpression;\r\n\r\n  return (\r\n    <div>\r\n      { showExpression === \"add\" && <Add /> }\r\n      { showExpression === \"sub\" && <Sub /> }\r\n      { showExpression === \"dev\" && <Dev /> }\r\n      { showExpression === \"mul\" && <Mul /> }\r\n    </div>\r\n  );\r\n\r\n\r\n};\r\n\r\nexport default Expression;","import React, { useState } from \"react\";\r\nimport Header from \"../header/header\";\r\nimport \"./bootstrap.min.css\";\r\nimport \"./style.css\";\r\nimport Expression from \"../expressions/Expression\";\r\n\r\nconst appVersion = \"v1.05\";\r\n\r\nconst btns = [\r\n  { label: \"+\", id: \"add\", color: \"danger\" },\r\n  { label: \"-\", id: \"sub\", color: \"warning\" },\r\n  { label: \"*\", id: \"mul\", color: \"success\" },\r\n  { label: \"/\", id: \"dev\", color: \"primary\" },\r\n];\r\n\r\nconst App = () => {\r\n\r\n  const [showExpression, setShownExpression] = useState(\"add\");\r\n\r\n  const onBtnClicked = btn => setShownExpression(btn);\r\n\r\n  return (\r\n    <div className=\"container\" >\r\n      <div className=\"version\">{ appVersion }</div>\r\n      <Header\r\n        buttons={ btns }\r\n        btnClicked={ onBtnClicked }\r\n        selectedBtn={ showExpression }\r\n      />\r\n      <hr />\r\n      <Expression selectedExpression={ showExpression } />\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default App;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./componets/app/app\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}